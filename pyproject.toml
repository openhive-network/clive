[build-system]
requires = [
    "poetry-core>=1.7.0",
    "poetry-dynamic-versioning>=1.0.0,<2.0.0",
]
build-backend = "poetry_dynamic_versioning.backend"

[project]
name = "hiveio-clive"
description = "CLI application for interacting with the Hive blockchain."
dynamic = ["version"]
readme = "README.md"
authors = [{ name = "Krzysztof Mochocki", email = "kmochocki@syncad.com" }, { name = "Mateusz Å»ebrak", email = "mzebrak@syncad.com" }]
requires-python = '>=3.12,<3.13'  # we are restricted to 3.12 because of wax
dependencies = [
    'loguru (==0.7.2)',
    'textual (==4.0.0)',
    'aiohttp (==3.11.15)',
    'typer (==0.17.3)',
    'inflection (==0.5.1)',
    'humanize (==4.12.2)',
    'toml (==0.10.2)',
    "pathvalidate (==3.3.1)",
    'hiveio-schemas (==1.27.12rc0)',
    'hiveio-beekeepy (==1.27.12rc1.dev4+a535d85)',
    'hiveio-wax (==1.27.12rc2.dev3+c55654f2)',
]

[project.urls]
repository = "https://gitlab.syncad.com/hive/clive"

[project.scripts]
clive = "clive.main:main"
clive-dev = "clive.dev:main"


[tool.poetry]
requires-poetry = '>=2.0.0,<3.0.0'
packages = [
    { include = "clive" },
]
source = [
    { name = "gitlab-hive", url = "https://gitlab.syncad.com/api/v4/projects/198/packages/pypi/simple", priority = "supplemental" },
    { name = "gitlab-schemas", url = "https://gitlab.syncad.com/api/v4/projects/362/packages/pypi/simple", priority = "supplemental" },
    { name = "gitlab-wax", url = "https://gitlab.syncad.com/api/v4/projects/419/packages/pypi/simple", priority = "supplemental" },
    { name = "gitlab-beekeepy", url = "https://gitlab.syncad.com/api/v4/projects/434/packages/pypi/simple", priority = "supplemental" },
]
version = "0.0.0"

[tool.poetry.requires-plugins]
poetry-dynamic-versioning = { version = ">=1.0.0,<2.0.0", extras = ["plugin"] }
poetry-plugin-freeze = { version = "1.2.0" }

[tool.poetry.dependencies]
hiveio-schemas = { source = "gitlab-schemas" }
hiveio-wax = { source = "gitlab-wax" }
hiveio-beekeepy = { source = "gitlab-beekeepy" }

[tool.poetry.group.embeddedtestnet.dependencies]
clive-local-tools = { path = "tests/clive-local-tools", develop = true }
test-tools = { path = "hive/tests/python/hive-local-tools/test-tools" }
pytest = "8.3.5"  # required by test-tools, otherwise they will fail

[tool.poetry.group.dev.dependencies]
mypy = "1.17.1"
pre-commit = "4.2.0"
pytest = "8.3.5"
pytest-asyncio = "0.26.0"
pytest-xdist = "3.6.1"
pytest-timeout = "2.3.1"
ruff = "0.12.9"
textual-dev = "1.5.1"
pydoclint = "0.6.6"
types-toml = "0.10.8.20240310"
clive-local-tools = { path = "tests/clive-local-tools", develop = true }
test-tools = { path = "hive/tests/python/hive-local-tools/test-tools", develop = true }

[tool.poetry.group.docs.dependencies]
mkdocs = "1.6.1"
mkdocstrings-python="1.16.12"
mkdocs-material = "9.6.12"
markdown-pycon = "1.0.1"

[tool.poetry-dynamic-versioning]
enable = true
format-jinja = """
    {%- set dirty_postfix = '.dirty' if dirty else '' -%}
    {%- if distance == 0 and not dirty -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- elif revision is not none -%}
        {{ serialize_pep440(base, stage, revision + 1, dev=distance, metadata=[commit]) }}{{ dirty_postfix }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base), stage, revision, dev=distance, metadata=[commit]) }}{{ dirty_postfix }}
    {%- endif -%}
"""

[tool.poetry-dynamic-versioning.substitution]
files = [
    "clive/__init__.py",
]


[tool.mypy]
strict = true
disallow_untyped_decorators = false

[[tool.mypy.overrides]]
module = ["test_tools.*"]
ignore_missing_imports = true


[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
select = ["ALL"]
external = [
   "DOC",  # pydoclint - we're running it externally since ruff hasn't implemented most of it rules yet. See: https://github.com/astral-sh/ruff/issues/12434
]
ignore = [
    "D1", # missing docstring in public
    "D203", # 1 blank line required before class docstring; because we re using D211
    "D212", # Multi-line docstring summary should start at the first line; because we re using D213
    "D413", # Missing blank line after last section
    "TRY003", # Avoid specifying long messages outside the exception class; too restrictive
    "TD002", # Missing author in to-do; no need for that
    "TD003", # Missing issue link on the line following this to-do; no need for that
    "SLF001", # Private member accessed: {access}; too restrictive
    "COM812", # Trailing comma missing; handled by ruff formatter
    "EM", # agreed not to use it in our convention
    "FIX", # can't have that enabled, as we treat ruff result as an error on CI
    "S101", # Use of assert detected; too restrictive
    "S603", # `subprocess` call: check for execution of untrusted input; https://github.com/astral-sh/ruff/issues/4045
    "ISC001", # Implicitly concatenated string literals on one line; disabled because conflicts with ruff formatter
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.isort]
known-first-party = ["clive", "wax", "schemas", "clive_local_tools"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"clive/__private/cli/**" = [
    "B008", # Do not perform function call {name} in argument defaults; in Typer it is common to do that # TODO: should be disabled more specifically but requires restructuring typer interface (e.g. storing all typer functions in cli/interface)
]
"clive/__private/ui/**" = [
    "PLR0913", # Too many arguments in function definition; too restrictive; # TODO: could be fixed or disabled in place
    "RUF012", # Mutable class attributes should be annotated with typing.ClassVar; TODO: Check if we can fix it, it's kinda Textual-specific
]
"tests/**" = [
    "S104", # Checks for hardcoded bindings to all network interfaces (0.0.0.0); in tests this is not a security issue
    "S105", # Possible hardcoded password assigned to: "{}"; in tests this is not a security issue
    "S106", # Possible hardcoded password assigned to argument: "{}"; in tests this is not a security issue
    "S602", # Check for method calls that initiate a subprocess with a shell.; in tests this is not a security issue
    "S605", # Checks for calls that start a process with a shell, providing guidance on whether the usage is safe or not; in tests this is not a security issue
]


[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
addopts = "--strict-markers"

[tool.pydoclint]
style = "google"
baseline = "pydoclint-errors-baseline.txt"
arg-type-hints-in-docstring = false  # we want types to be only provided in the signatures and not redundant
check-return-types = false  # we want types to be only provided in the signatures and not redundant
check-yield-types = false  # we want types to be only provided in the signatures and not redundant
check-style-mismatch = true
generate-baseline = true
skip-checking-short-docstrings = false
exclude = "tests/*"
