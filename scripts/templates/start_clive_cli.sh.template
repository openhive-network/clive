<BASE_PLACEHOLDER>

# Start clive cli script content

# Set the container name for CLI mode
CONTAINER_NAME="clive-cli-$(date +%s)"
export CONTAINER_NAME

# Set HAS_EXEC variable when passing --exec flag, this variable is used for validation purpose
HAS_EXEC=0
# Set HAS_PROFILE_NAME variable when passing --profile-name flag, this variable is used for validation purpose
HAS_PROFILE_NAME=0

# Print usage information for the script
print_help() {
    echo "Usage: $0 [<docker_img>] [OPTION[=VALUE]]... [<clive_option>]..."
    echo
    echo "Allows to start Clive application in CLI mode."
    echo "CLI terminal will start in mapped host directory."
    echo
    echo "OPTIONS:"
    echo "  --data-dir=DIRECTORY_PATH      Points to a Clive data directory to store profile data. Defaults to ${HOME}/.clive directory."
    echo "  --docker-option=OPTION         Allows specifying additional Docker options to pass to underlying Docker run."
    echo "  --exec=PATH_TO_FILE            Path to bash script to be executed."
    echo "  --profile-name=PROFILE_NAME    Name of profile that will be used, default is profile selection."
    echo "  --unlock-time=MINUTES          Unlock time in minutes, default is no timeout for unlock."
    echo "  --help                         Display this help screen and exit."
    echo
}

# Get the WORKINGDIR from containers image
get_workdir() {
    docker inspect --format='{{.Config.WorkingDir}}' "$IMAGE_NAME"
}

# Helper function for exec argument
handle_exec_option() {
    local file_to_mount="$1"

    WORKDIR=$(get_workdir)
    if [ -z "$WORKDIR" ]; then
        echo "Error: Could not retrieve WORKDIR for image: $IMAGE_NAME"
        exit 1
    fi

    FILE_TO_MOUNT_NAME=$(basename "$file_to_mount")

    MOUNT_TARGET="${WORKDIR}/${FILE_TO_MOUNT_NAME}"
    add_docker_arg "--volume"
    add_docker_arg "${file_to_mount}:${MOUNT_TARGET}"
    add_clive_arg "--exec"
    add_clive_arg "${FILE_TO_MOUNT_NAME}"
}

# Helper function for --profile-name argument
handle_profile_name_option() {
    local profile_name="$1"
    add_clive_arg "--profile-name"
    add_clive_arg "${profile_name}"
}

# Helper function for --unlock-time argument
handle_unlock_time_option() {
    local unlock_time_mins="$1"
    add_clive_arg "--unlock-time"
    add_clive_arg "${unlock_time_mins}"
}

# Override parse_args to handle --exec flag specifically for CLI mode
parse_args() {
    while [ $# -gt 0 ]; do
        case "$1" in
            --exec)
                shift
                handle_exec_option "${1}"
                HAS_EXEC=1
                ;;
            --exec=*)
                handle_exec_option "${1#*=}"
                HAS_EXEC=1
                ;;
            --profile-name)
                shift
                handle_profile_name_option "${1}"
                HAS_PROFILE_NAME=1
                ;;
            --profile-name=*)
                handle_profile_name_option "${1#*=}"
                HAS_PROFILE_NAME=1
                ;;
            --unlock-time)
                shift
                handle_unlock_time_option "${1}"
                ;;
            --unlock-time=*)
                handle_unlock_time_option "${1#*=}"
                ;;
            *)
            new_args+=("$1")
            ;;
        esac
        shift
    done
    common_parse_args "${new_args[@]}"
}

validate_pipeline_with_exec() {
    # pipeline input is only allowed with --exec
    if [[ -n "${PIPELINE:-}" && "$HAS_EXEC" -eq 0 ]]; then
        echo "Error: Pipeline input is only allowed when --exec is passed."
        exit 3
    fi
}

validate_profile_name_with_exec() {
    # combining flag --profile-name with --exec is forbidden
    if [[ "$HAS_PROFILE_NAME" -eq 1 && "$HAS_EXEC" -eq 1 ]]; then
        echo "Error: Cannot set both --profile-name and --exec."
        exit 3
    fi
}

validate() {
    validate_pipeline_with_exec
    validate_profile_name_with_exec
    common_validation
}

# Add the --cli flag to Clive arguments
add_clive_arg "--cli"

# Run the main function, passing the extended parse_args
main "$@"
