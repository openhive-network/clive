image: "$CI_REGISTRY_IMAGE/ci-base-image@sha256:77727fd98414cf36b7e2059895fd00ab918686534945638c2aa1c32cea7070f2"

stages:
  - static_code_analysis
  - build
  - tests
  - build_docker

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  PACKAGES_TO_CHECK: "clive/ tests/"
  # colors:
  TXT_BLUE: "\e[1;34m"
  TXT_CLEAR: "\e[0m"
  BEEKEEPER_BINARY: "$CI_PROJECT_DIR/beekeeper"
  HIVED_BINARY: "$CI_PROJECT_DIR/hived"
  WAX_WHEEL: "dist/*.whl"

.shared_tags: &shared_tags
  - hived-for-tests

.configuration:
  before_script: &configuration_before_script # configure python
    - python3 -V
    - poetry self update
    - python3 -m venv venv/
    - source venv/bin/activate
    - poetry install
    - pip list
  tags: *shared_tags

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| STATIC CODE ANALYSIS |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

pre_commit_checks:
  stage: static_code_analysis
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Checking all files with pre-commit hooks...${TXT_CLEAR}" &&
      pre-commit run --all-files

lint_code_with_ruff:
  stage: static_code_analysis
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Linting all sources with Ruff (check)...${TXT_CLEAR}" &&
      ruff ${PACKAGES_TO_CHECK}
    - echo -e "${TXT_BLUE}Linting all sources with Ruff (diff)...${TXT_CLEAR}" &&
      ruff ${PACKAGES_TO_CHECK} --diff

formatting_with_black_check:
  stage: static_code_analysis
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Checking code formatting with Black...${TXT_CLEAR}" &&
      black ${PACKAGES_TO_CHECK} --check --diff --color

type_check_with_mypy:
  stage: static_code_analysis
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Checking types with mypy...${TXT_CLEAR}" &&
      mypy ${PACKAGES_TO_CHECK}

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| STATIC CODE ANALYSIS |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| BUILD |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

.hive_based_build:
  stage: build
  needs: []
  variables:
    TARGET: ""
    SOURCE: ""
    DESTINATION: ""
  script:
    - cd hive
    - mkdir build && cd build
    - cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_HIVE_TESTNET=ON -GNinja ..
    - ninja $TARGET
    - cp $SOURCE $DESTINATION
  artifacts:
    paths:
      - $DESTINATION
  tags: *shared_tags

build_beekeeper:
  extends: .hive_based_build
  variables:
    TARGET: "beekeeper"
    SOURCE: "programs/beekeeper/beekeeper"
    DESTINATION: "$BEEKEEPER_BINARY"

build_hived:
  extends: .hive_based_build
  variables:
    TARGET: "hived"
    SOURCE: "programs/hived/hived"
    DESTINATION: "$HIVED_BINARY"

build_wax_wheel:
  stage: build
  needs: [ ]
  before_script:
    - python3 -V
    - poetry self update
    - python3 -m venv venv/
    - source venv/bin/activate
    - pip list
  script:
    - cd wax
    - pip install cython
    - poetry build
    - ls -al dist/
  artifacts:
    when: always
    paths:
      - dist/
  tags: *shared_tags

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| BUILD |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| TESTS |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

.testing:
  stage: tests
  extends: .configuration
  needs:
    - job: build_beekeeper
      artifacts: true
    - job: build_hived
      artifacts: true
  variables:
    CLIVE_BEEKEEPER__PATH: $BEEKEEPER_BINARY
    HIVED_PATH: $HIVED_BINARY
    PATH_TO_REPORT: "$CI_PROJECT_DIR/report.xml"
  artifacts:
    reports:
      junit: $PATH_TO_REPORT
    paths:
      - "**/generated"
    when: always
    expire_in: 7 days

testing_clive:
  extends: .testing
  script:
    - echo -e "${TXT_BLUE}Launching clive tests...${TXT_CLEAR}"
    - python3 -m pytest -n auto --junitxml=report.xml tests/


test_installing_wax_from_wheel:
  extends: .testing
  needs:
    - job: build_wax_wheel
      artifacts: true
  script:
    - echo -e "${TXT_BLUE}Installing wax from wheel...${TXT_CLEAR}"
    - pip uninstall -y wax
    - pip install $WAX_WHEEL
    - pytest -n auto --junitxml=report.xml tests/unit/wax/

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| TESTS |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| BUILD DOCKER |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

build_and_push_docker_image:
  image: docker:20.10.13
  stage: build_docker
  needs:
    - job: pre_commit_checks
    - job: build_beekeeper
      artifacts: true
    - job: testing_clive
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA
    TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  services:
    - docker:20.10.13-dind
  script:
    - ls -la
    - echo -e "${TXT_BLUE}Building a docker image started...${TXT_CLEAR}"
    - echo $CI_BUILD_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
    - docker build --build-arg BEEKEEPER_LOCATION=./beekeeper  -t $TAG_COMMIT -t $TAG_LATEST -f Dockerfile .
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST
  only:
    - develop
    - master
  tags: *shared_tags
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| BUILD DOCKER |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
