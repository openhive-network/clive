image: "registry.gitlab.syncad.com/hive/hive/ci-base-image:ubuntu22.04-3"

stages:
  - static_code_analysis
  - build
  - tests
  - build_docker

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

include:
  - template: Workflows/Branch-Pipelines.gitlab-ci.yml
  - project: "hive/haf"
    ref: c39e423fa50caf134356de467af8c6ea8170bc43 # develop
    file: "/scripts/ci-helpers/prepare_data_image_job.yml"

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  PACKAGES_TO_CHECK: "clive/ tests/"
  # colors:
  TXT_BLUE: "\e[1;34m"
  TXT_CLEAR: "\e[0m"
  HIVED_BINARIES: "$CI_PROJECT_DIR/hived-binaries"
  BEEKEEPER_BINARY: "$HIVED_BINARIES/beekeeper"
  HIVED_PATH: "$HIVED_BINARIES/hived"
  CLI_WALLET_PATH: "$HIVED_BINARIES/cli_wallet"
  GET_DEV_KEY_PATH: "$HIVED_BINARIES/get_dev_key"
  COMPRESS_BLOCK_LOG_PATH: "$HIVED_BINARIES/compress_block_log"
.shared_tags: &shared_tags
  - hived-for-tests

.configuration:
  before_script: &configuration_before_script # configure python
    - python3 -V
    - poetry self update
    - python3 -m venv venv/
    - source venv/bin/activate
    - poetry install
    - pip list
  tags: *shared_tags

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| STATIC CODE ANALYSIS |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

pre_commit_checks:
  stage: static_code_analysis
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Checking all files with pre-commit hooks...${TXT_CLEAR}" &&
      pre-commit run --all-files

lint_code_with_ruff:
  stage: static_code_analysis
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Linting all sources with Ruff (check)...${TXT_CLEAR}" &&
      ruff ${PACKAGES_TO_CHECK}
    - echo -e "${TXT_BLUE}Linting all sources with Ruff (diff)...${TXT_CLEAR}" &&
      ruff ${PACKAGES_TO_CHECK} --diff

formatting_with_black_check:
  stage: static_code_analysis
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Checking code formatting with Black...${TXT_CLEAR}" &&
      black ${PACKAGES_TO_CHECK} --check --diff --color

type_check_with_mypy:
  stage: static_code_analysis
  extends: .configuration
  script:
    - echo -e "${TXT_BLUE}Checking types with mypy...${TXT_CLEAR}" &&
      mypy ${PACKAGES_TO_CHECK}

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| STATIC CODE ANALYSIS |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| BUILD |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

prepare_hived_image:
  extends: .prepare_hived_image
  stage: build
  variables:
    SUBMODULE_DIR: "$CI_PROJECT_DIR/hive"
    REGISTRY_USER: "$HIVED_CI_IMGBUILDER_USER"
    REGISTRY_PASS: $HIVED_CI_IMGBUILDER_PASSWORD
  tags:
    - public-runner-docker
    - hived-for-tests

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| BUILD |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| TESTS |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

.testing:
  stage: tests
  extends: .configuration
  needs:
    - job: prepare_hived_image
      artifacts: true
  variables:
    CLIVE_BEEKEEPER__PATH: $BEEKEEPER_BINARY
    PATH_TO_REPORT: "$CI_PROJECT_DIR/report.xml"
  artifacts:
    reports:
      junit: $PATH_TO_REPORT
    paths:
      - "**/generated"
    when: always
    expire_in: 7 days

testing_clive:
  extends: .testing
  script:
    - ls -la "$CI_PROJECT_DIR"
    - ls -la "$HIVED_BINARIES"
    - echo -e "${TXT_BLUE}Launching clive tests...${TXT_CLEAR}"
    - python3 -m pytest -n auto --durations 0 --junitxml=report.xml tests/

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| TESTS |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| BUILD DOCKER |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

.build_and_push_base:
  image: docker:20.10.13
  stage: build_docker
  needs:
    - job: pre_commit_checks
    - job: prepare_hived_image
      artifacts: true
    - job: testing_clive
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME$BUILD_SUFFIX:$CI_COMMIT_SHORT_SHA
    TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME$BUILD_SUFFIX:latest
  services:
    - docker:20.10.13-dind
  before_script:
    - ls -la
    - cd docker/
    - echo -e "${TXT_BLUE}Building a docker image started...${TXT_CLEAR}"
    - echo $CI_BUILD_TOKEN | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY
  after_script:
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST
  tags: *shared_tags

build_and_push_docker_image:
  extends: .build_and_push_base
  only:
    - develop
    - master
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST -f Dockerfile ..

build_and_push_docker_testnet_image:
  extends: .build_and_push_base
  needs:
    - job: pre_commit_checks
    - job: testing_clive
    - job: prepare_hived_image
      artifacts: true
  rules:
    - if: '$CI_COMMIT_REF_NAME != "master" && $CI_COMMIT_REF_NAME != "develop"'
      when: manual
    - when: always
  allow_failure: true
  variables:
    BUILD_SUFFIX: "-testnet"
  script:
    - docker build -t $TAG_COMMIT -t $TAG_LATEST -f Dockerfile.TESTNET ..
#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| BUILD DOCKER |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
