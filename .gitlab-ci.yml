stages:
  - static_code_analysis
  - build
  - tests
  - deploy
  - build_and_deploy_docker

workflow:
  rules:
    - if: '$CI_MERGE_REQUEST_IID'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - if: '$CI_COMMIT_BRANCH || $CI_COMMIT_TAG'

variables:
  # git:
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: recursive
  GIT_SUBMODULE_DEPTH: 1

  # static code analysis:
  PACKAGES_TO_CHECK: "clive/ tests/"
  # tests:
  PYTEST_NUMBER_OF_PROCESSES: 16
  PYTEST_LOG_DURATIONS: 1
  # colors:
  TXT_GREEN: "\e[1;32m"
  TXT_BLUE: "\e[1;34m"
  TXT_CLEAR: "\e[0m"
  # binaries:
  HIVE_BUILD_ROOT_PATH: "hived-binaries"
  BEEKEEPER_BINARY: "${HIVE_BUILD_ROOT_PATH}/mainnet/beekeeper"
  # ci registry:
  CI_BASE_IMAGE_TAG: "@sha256:81f56a1820497ff3cb1342327b7242dc50270db04cbfdd8d6198af1bb0e910b3"
  CI_BASE_IMAGE: "registry.gitlab.syncad.com/hive/hive/ci-base-image${CI_BASE_IMAGE_TAG}"
  CLIVE_TESTNET_BASE_IMAGE_TAG: "@sha256:e4797f961fd6c6a843d100b183842af408664286c1b6a6b23baafa"
  CLIVE_TESTNET_BASE_IMAGE: "registry.gitlab.syncad.com/hive/common-ci-configuration/python_development${CLIVE_TESTNET_BASE_IMAGE_TAG}"
  CLIVE_BASE_IMAGE_TAG: "@sha256:e751423e7019033d0b70fd0cbd15d05a11fbc5a4756c7e547df63f7029c0f2aa"
  CLIVE_BASE_IMAGE: "registry.gitlab.syncad.com/hive/common-ci-configuration/python_runtime${CLIVE_BASE_IMAGE_TAG}"
  # other:
  AFTER_SCRIPT_IGNORE_ERRORS: 'false'

include:
  - project: 'hive/hive'
    ref: 9009edf6270db5a0f3bc1d77308bd5cbfb46c1f6
    file: '/scripts/ci-helpers/prepare_data_image_job.yml'
    # Do not include common-ci-configuration here; it is already referenced by scripts/ci-helpers/prepare_data_image_job.yml

image: ${CI_BASE_IMAGE}

default:
  tags:
    - public-runner-docker

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| STATIC CODE ANALYSIS |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

pre_commit_checks:
  stage: static_code_analysis
  extends: .pre_commit_checks_template

verify_poetry_lock_sanity:
  stage: static_code_analysis
  extends: .verify_poetry_lock_sanity_template
  script:
    - poetry check --lock

lint_code_with_ruff:
  stage: static_code_analysis
  extends: .lint_code_with_ruff_template
  script:
    - echo -e "${TXT_BLUE}Linting all sources with Ruff...${TXT_CLEAR}" &&
      ruff check ${MAYBE_EXPLICIT_CONFIG} ${PACKAGES_TO_CHECK}

formatting_with_ruff_check:
  stage: static_code_analysis
  extends: .project_develop_configuration_template
  script:
    - echo -e "${TXT_BLUE}Checking code formatting with Ruff...${TXT_CLEAR}" &&
      ruff format --check --diff ${PACKAGES_TO_CHECK}

type_check_with_mypy:
  stage: static_code_analysis
  extends: .type_check_with_mypy_template

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| STATIC CODE ANALYSIS |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>| BUILD |>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

.common_prepare_hived_image:
  extends: .prepare_hived_image
  stage: build
  variables:
    GIT_SUBMODULE_DEPTH: 20

prepare_mainnet_hived_image:
  extends: .common_prepare_hived_image
  variables:
    HIVE_NETWORK_TYPE: mainnet

prepare_testnet_hived_image:
  extends: .common_prepare_hived_image
  variables:
    HIVE_NETWORK_TYPE: testnet

build_wheel:
  extends: .build_wheel_template
  stage: build
  script:
    - ./python/scripts/build_clive.sh 1
    - echo -e "${TXT_BLUE}Building python wheel...${TXT_CLEAR}"
    - ls -al
    - poetry version
    - poetry self add "poetry-plugin-freeze==1.2.0"
    - poetry build --format wheel
    - poetry freeze-wheel
    - if [ ! -d "${DIST_DIR}" ] && [ -d "dist" ]; then cp -r "dist" "${DIST_DIR}"; fi
    - ls -al ${DIST_DIR}

.build_python_docs_env:
  extends: .runtime_like_python_env
  stage: build
  before_script:
    - !reference [.runtime_like_python_env, before_script]
    - poetry -C "${PYPROJECT_DIR}" install --no-root --only docs
    - pip list


.python_docs_variables:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      variables:
        CURRENT_CONTENT_PATH: "preview/${CI_COMMIT_REF_SLUG}"
        CURRENT_URL: $CURRENT_CONTENT_PATH
    - variables:
        CURRENT_CONTENT_PATH: "default/"
        CURRENT_URL: ""
  variables:
    PYPROJECT_DIR: "${CI_PROJECT_DIR}"
    PAGES_ENV_NAME: "pages/${CI_COMMIT_REF_SLUG}"
    PAGES_BASE_DIR: "${CI_PROJECT_DIR}"
    PAGES_CONTENT_PATH: "${PAGES_BASE_DIR}/${CURRENT_CONTENT_PATH}"
    DOCS_BUILD_TARGET_DIR: "${PYPROJECT_DIR}/site"


build_python_docs:
  extends:
    - .build_python_docs_env
    - .python_docs_variables
  script:
    - cd $PYPROJECT_DIR
    - mkdocs build --site-dir $DOCS_BUILD_TARGET_DIR
  artifacts:
    paths:
      - $DOCS_BUILD_TARGET_DIR
    when: always
    expire_in: 1 week

clean_python_docs_preview:
  extends: .python_docs_deployment_base
  script:
    - echo "Removing ${PAGES_CONTENT_PATH}"
    - rm -rf $PAGES_CONTENT_PATH
  environment:
    name: $PAGES_ENV_NAME
    action: stop
  when: manual
  allow_failure: true


generate_docs:
  stage: build
  extends: .npm_based_job_base
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    SOURCE_DIR: "${CI_PROJECT_DIR}/clive"
    DIST_DIR: "${CI_PROJECT_DIR}/docs/api"
  script:
    - bash scripts/generate_api_docs.sh \
      "${CI_PROJECT_URL}" \
      "${CI_COMMIT_SHA}" \
      "https://docs.clive.com/api" \
      "${DIST_DIR}"
  artifacts:
    paths:
      - "${DIST_DIR}"
    when: always
    expire_in: 1 week

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| TESTS |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

.testing:
  stage: tests
  extends: .project_develop_configuration_template
  needs:
    - job: prepare_mainnet_hived_image
      artifacts: true
    - job: prepare_testnet_hived_image
      artifacts: true
    - job: build_wheel
      artifacts: true
  variables:
    CLIVE_BEEKEEPER__COMMUNICATION_TOTAL_TIMEOUT_SECS: 60
    CLIVE_NODE__COMMUNICATION_TOTAL_TIMEOUT_SECS: 60
    CLIVE_BEEKEEPER__INITIALIZATION_TIMEOUT: 60
    CLIVE_BEEKEEPER__CLOSE_TIMEOUT: 60
    PATH_TO_REPORT: "$CI_PROJECT_DIR/report.xml"
  before_script:
    - !reference [.project_develop_configuration_template, before_script]
    - pip list --editable
    - python3 -m pip uninstall clive -y
    - echo -e "${TXT_BLUE}We want to perform tests on Clive after installing it from a wheel...${TXT_CLEAR}"
    - stat dist/*.whl
    - python3 -m pip install dist/*.whl
    - pip list --editable
    - clive --version
  artifacts:
    reports:
      junit: $PATH_TO_REPORT
    paths:
      - "**/generated*/"
    when: always
    expire_in: 7 days
  after_script:
    - bash "${CI_PROJECT_DIR}/scripts/check_for_dangling_beekeeper.bash"

.python_env_common:
  before_script:
    - pip list

.runtime_like_python_env:
  extends: .python_env_common
  stage: test
  variables:
    PYPROJECT_DIR: "${CI_PROJECT_DIR}"
  needs:
    - job: build_wheel
      artifacts: true
  before_script:
    - pip install --index-url $FIRST_INDEX --extra-index-url $SECOND_INDEX ${PYPROJECT_DIR}/dist/*.whl
    - pip list

.python_docs_deployment_base:
  extends: .python_docs_variables
  stage: deploy
  cache:
    key: gitlab-pages
    paths: [ public ]
  artifacts:
    paths: [ public ]
  tags:
    - data-cache-storage


testing_clive:
  extends: .testing
  variables:
    PYTEST_TIMEOUT_MINUTES: 10
  script:
    - echo -e "${TXT_BLUE}Launching clive concurrent tests...${TXT_CLEAR}"
    - export PYTEST_ARGS=(--ignore tests/tui --ignore tests/functional/cli -k "not test_autocompletion_time" -v)
    - !reference [.run-pytest, script]

testing_clive_import_times_during_autocompletion:
  extends: .testing
  variables:
    PYTEST_NUMBER_OF_PROCESSES: 1
    PYTEST_TIMEOUT_MINUTES: 3
  script:
    - echo -e "${TXT_BLUE}Launching clive test for autocompletion time...${TXT_CLEAR}"
    - export PYTEST_ARGS=(-k test_autocompletion_time -v)
    - !reference [.run-pytest, script]

testing_tui:
  extends: .testing
  variables:
    PYTEST_TIMEOUT_MINUTES: 10
  script:
    - echo -e "${TXT_BLUE}Launching tui tests...${TXT_CLEAR}"
    - export PYTEST_ARGS=(tests/tui -v)
    - !reference [.run-pytest, script]

testing_cli:
  extends: .testing
  variables:
    PYTEST_TIMEOUT_MINUTES: 10
  script:
    - echo -e "${TXT_BLUE}Launching cli commands tests...${TXT_CLEAR}"
    - export PYTEST_ARGS=(tests/functional/cli -v)
    - !reference [.run-pytest, script]

testing_password_private_key_logging:
  stage: tests
  needs:
    - job: testing_clive
      artifacts: true
    - job: testing_clive_import_times_during_autocompletion
      artifacts: true
    - job: testing_tui
      artifacts: true
    - job: testing_cli
      artifacts: true
  script:
    - cd "${CI_PROJECT_DIR}/tests"
    - bash "${CI_PROJECT_DIR}/scripts/check_for_private_key_or_password_logging.bash"

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| DEPLOY |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

.deploy_wheel_needs: &deploy_wheel_needs
  needs:
    - job: testing_password_private_key_logging
    - job: build_wheel
      artifacts: true

deploy_wheel_to_gitlab:
  extends: .deploy_wheel_to_gitlab_template
  stage: deploy
  <<: *deploy_wheel_needs
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
    - when: manual

deploy_wheel_to_pypi:
  extends: .deploy_wheel_to_pypi_template
  stage: deploy
  <<: *deploy_wheel_needs

deploy_python_docs:
  pages: true
  extends: .python_docs_deployment_base
  needs:
    - job: build_python_docs
      artifacts: true
  variables:
    PAGES_URL: "${CI_PAGES_URL}/${CURRENT_URL}"
  script:
    - echo "Directory used for gitlab pages publishing ${PAGES_CONTENT_PATH}"
    - rm -rf $PAGES_CONTENT_PATH
    - mkdir -p $PAGES_CONTENT_PATH
    - mv $DOCS_BUILD_TARGET_DIR/* $PAGES_CONTENT_PATH
    - echo "Documentation will be available at ${PAGES_URL} or through Operate/Environments view by pointing ${PAGES_ENV_NAME}"
  environment:
    name: $PAGES_ENV_NAME
    action: start
    url: $PAGES_URL
    on_stop: clean_python_docs_preview

#<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<| BUILD AND DEPLOY DOCKER |<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

.generate_clive_startup_scripts_base:
  extends: .job-defaults
  stage: build_and_deploy_docker
  variables:
    GIT_SUBMODULE_STRATEGY: none
  script:
    - $CI_PROJECT_DIR/scripts/ci-helpers/generate_startup_scripts.sh "${CLIVE_IMAGE_NAME}"
  artifacts:
    expose_as: 'startup scripts'
    paths:
      - ./scripts/start_clive.sh
      - ./scripts/start_clive_cli.sh

.prepare_clive_image:
  extends: .docker_image_builder_job_template
  stage: build_and_deploy_docker
  needs:
    - job: pre_commit_checks
    - job: prepare_mainnet_hived_image
      artifacts: true
    - job: deploy_wheel_to_gitlab
      artifacts: true
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "false"'
      when: manual
      allow_failure: true
    - when: never
  variables:
    BASE_IMAGE: $CLIVE_BASE_IMAGE
    TAG_COMMIT: ${CI_COMMIT_SHORT_SHA}
    SCRIPTS_PATH: "$CI_PROJECT_DIR/scripts"
  script:
    - echo "WHEEL_BUILD_VERSION is ${WHEEL_BUILD_VERSION}"
    - $SCRIPTS_PATH/ci-helpers/build_instance.sh "${TAG_COMMIT}" "${CI_PROJECT_DIR}" "${CI_REGISTRY_IMAGE}" \
       --hived-source-image=${HIVED_IMAGE_NAME} --base-image=${BASE_IMAGE} \
       --clive-version=${WHEEL_BUILD_VERSION}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD "$CI_REGISTRY"
    - source docker_image_name.env
    - docker push ${CLIVE_IMAGE_NAME}
    - echo -e "${TXT_BLUE}Pushed image ${TXT_GREEN}${CLIVE_IMAGE_NAME}${TXT_CLEAR}"
  artifacts:
    reports:
      dotenv: docker_image_name.env
    paths:
      - ./docker_image_name.env
    expire_in: 6 hours

.clive_testnet_needs: &clive_testnet_needs
  needs:
    - job: prepare_testnet_hived_image
      artifacts: true
    - job: deploy_wheel_to_gitlab
      artifacts: true

build_and_push_clive_image:
  extends: .prepare_clive_image

generate_clive_startup_scripts:
  extends: .generate_clive_startup_scripts_base
  needs:
    - job: build_and_push_clive_image
      artifacts: true
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "false"'
      when: on_success
    - when: never
  artifacts:
    expire_in: 7 days

build_and_push_clive_testnet_image:
  extends: .prepare_clive_image
  <<: *clive_testnet_needs
  variables:
    BASE_IMAGE: $CLIVE_TESTNET_BASE_IMAGE
    BUILD_INSTANCE_ARGS: "--embedded-testnet"

.prepare_clive_stable_image:
  extends: .prepare_clive_image
  variables:
    TAG_COMMIT: "stable"
  needs:
    - job: prepare_mainnet_hived_image
      artifacts: true
    - job: deploy_wheel_to_gitlab
      artifacts: true
  rules:
    - if: '$CI_COMMIT_REF_PROTECTED == "true" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: manual
    - when: never

build_and_push_clive_stable_image:
  extends: .prepare_clive_stable_image

build_and_publish_tagged_image: # official release tagged images
  stage: build_and_deploy_docker
  extends: .publish_docker_image_template
  needs:
    - job: pre_commit_checks
    - job: prepare_mainnet_hived_image
      artifacts: true
    - job: deploy_wheel_to_gitlab
      artifacts: true
  variables:
    GIT_DEPTH: 0
    BASE_IMAGE: $CLIVE_BASE_IMAGE
  script:
    - scripts/ci-helpers/build_and_publish_instance.sh \
        --build-instance-arg="--hived-source-image=${HIVED_IMAGE_NAME}" \
        --build-instance-arg="--base-image=${BASE_IMAGE}" \
        --clive-version=${WHEEL_BUILD_VERSION}"
  artifacts:
    reports:
      dotenv: docker_image_name.env
    paths:
      - ./docker_image_name.env

generate_clive_develop_startup_scripts:
  extends: .generate_clive_startup_scripts_base
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
    - when: never
  needs:
    - job: build_and_push_clive_stable_image
      artifacts: true
  artifacts:
    expire_in: 30 days

generate_clive_master_startup_scripts:
  extends: .generate_clive_startup_scripts_base
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
    - when: never
  needs:
    - job: build_and_push_clive_stable_image
      artifacts: true
  artifacts:
    expire_in: never

generate_clive_tagged_image_startup_scripts:
  extends: .generate_clive_startup_scripts_base
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"'
      when: on_success
    - when: never
  needs:
    - job: build_and_publish_tagged_image
      artifacts: true
  artifacts:
    expire_in: never

build_and_push_clive_stable_testnet_image:
  extends: .prepare_clive_stable_image
  <<: *clive_testnet_needs
  variables:
    BASE_IMAGE: $CLIVE_TESTNET_BASE_IMAGE
    BUILD_INSTANCE_ARGS: "--embedded-testnet"
    STABLE_IMAGE_TAG: "testnet-${CI_COMMIT_REF_NAME}"
